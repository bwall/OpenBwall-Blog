{
	"title" : "Ballast Security: Bringing Balance Back to Security",
	"description" : "OpenBwall is Brian Wallace's Blog.  Brian is also known as bwall and @bwallHatesTwits.  This blog has entries about software development, security, and various different ideas of bwall's.",
	"keywords" : "Brian Wallace, bwall, bwallHatesTwits, OpenBwall, Software Development, Software Engineering, Security",
	"pages" : {
		"contact" : {
			"title" : "Contact",
			"description" : "Methods to contact bwall",
			"keywords" : "bwall, Twitter, email",
			"body" : "You can contact me at @bwallHatesTwits or bwall@openbwall.com"
		},
		"research" : {
			"title" : "Research",
			"description" : "Research at Ballast Security",
			"keywords" : "ballast security, research, security",
			"body" : "<p>Here at Ballast Security, we do a lot of research.  Whether it is defensive or offensive, we will research it.  We often release papers on these topics, and you can find them here.</p><p><a title='Transferable State Attack by Brian Wallace' href='https://firebwall.com/research/TransferableStateAttackonIteratedHashingFunctions.pdf' target='_blank'>Transferable State Attack By Brian Wallace</a></p><p><a title='Proper Password Hashing' href='https://firebwall.com/research/ProperPasswordHashing.pdf' target='_blank'>Proper Password Hashing By bwall and drone</a></p><p><a title='Insecurity of Poorly Designed RFI Payloads Part 2' href='https://firebwall.com/research/InsecurityofPoorlyDesignedRemoteFileInclusionPayloads-Part2.pdf' target='_blank'>Insecurity of Poorly Designed RFI Payloads Part 2</a></p><p><a title='Insecurity of Poorly Designed RFI Payloads Part 1' href='https://firebwall.com/research/InsecurityofPoorlyDesignedRemoteFileInclusionPayloads-P1.pdf' target='_blank'>Insecurity of Poorly Designed RFI Payloads Part 1</a></p>"
		}
	},
	"order" : ["Optimizing-Bitcoin-Miner-Idea", "Open-Source-Recruiting", "Interpreting-Cyber-Espionage", "AI-API-Project-Idea", "When-Are-Open-Source-Projects-Done", "About-OpenBwall"],
	"posts" : {
		"Optimizing-Bitcoin-Miner-Idea" : {
			"title" : "An Idea to Optimize GPU Based Bitcoin Miners",
			"description" : "A post detailing an idea about how to potentially increase the speed of GPU based bitcoin miners.",
			"keywords" : "Bitcoin, OpenCL, CUDA, GPU, Development, Optimization",
			"date" : "03/12/2013",
			"body" : "<p>Recently, I began looking into optimizing Bitcoin mining, as I have quite a bit of GPU power that is mostly idle.  I started my focus with poclbm, since its combination of Python and OpenCL all on a command line interface made it perfect for my development server.  The first thing I looked to optimize was the use of SHA256, since I had already done quite a bit of SHA256 optimization on John the Ripper - Jumbo.  It appears that the OpenCL kernel could benefit from the Transferable State Attack, as well as quite a few other SHA256 OpenCL optimizations.  Those were nothing new really, and there was a limit to the benefit from them.  Then I got to thinking, since the first tranform of the first hash(Bitcoin mining requires 3 total transforms per check) can be done once then copied for every following nonce, why not hard code the state variables of the first transform directly into the OpenCL kernel code.  Currently, these 8 4 byte integers are passed in as parameters, and there are other values that are passed in as well that are same for all of the 2^32 possible nonces.  OpenCL kernels are compiled at run time, no matter if you dynamically generate them directly before you load the .cl file as a kernel.  This will not only allow for minimal use of the memory in the kernel, but also allow for the compiler to optimize the code even further.  When I have the time to fully test this and my other optimizations, I will post the results.</p>"
		},
		"Open-Source-Recruiting": {
			"title" : "Using Open Source Development to Recruit Employees",
			"description" : "This post details an idea about how companies and organizations can use open source projects as a potential recruitment tool.",
			"keywords" : "Open Source, Recruitment, Jobs, Developers, Security, Professionals",
			"date" : "03/06/2013",
			"body" : "<p>Right now, for anyone skilled in development and/or security is having no problem finding a job.  The demand for skilled developers and security professionals is still growing.  The problem is for companies that are hiring.  They don't really have an accurate way to assess potential employees' skills.  For a while, certifications were the way to go, but it seems that most companies have started to ignore them as a display of actual skill, since so many of the applicants have them.  There has even been expressed angst against those who put multiple certifications next to their name.</p><p>The question is, how can companies assess the talent of potential employees without shelling out money on plane tickets for interviews where they really just learn how well the potential hires can talk?  My solution has been to create open source projects for the prospective employees to work on.  For developers, they create the projects, slowly adding to them and making them more useful to the community.  For QA, they test the projects, and make sure that they are functional, useful, and suggest improvements.  For AppSec, they try to find vulnerabilities, or at least point out potential points of execution.</p><p>The major advantage to using this method is you contribute to the open source community(a hopefully useful project), you can assess your potential employees for free, and you can publicly show off your new employees skills to investors and anyone you answer to.  It can also save you money on looking for new employees, because people who aren't even known potential employees could contribute and be assessed.</p>"
		},
		"Interpreting-Cyber-Espionage" : {
			"title" : "How to Interpret Cyber Espionage",
			"description" : "This post details how public releases about cyber espionage should not be interpretted as shallowly as most other releases.",
			"keywords" : "Cyber Espionage",
			"date" : "03/02/2013",
			"body" : "<p>I often see mistakes being made when interpreting cyber espionage attacks.  Most people think of these attacks as most classical hacking attacks are seen.  Normal attacks are either looking to gain access to something, or get some information, or to shame the target.  When considering the intentions behind cyber espionage, especially at the global level, these motivations are short sighted to say the least.  The key to finding the intentions of these attacks are to look at how people are affected by the attacks, and their reactions.  Espionage entails hiding your desire/intentions, even if you are caught.  In some situations, like when you are trying to spread a concept of dominance over an opposing force, it might be advantageous to get caught having a wide spread infection over a generally low priority target.  A perfect example of this is the somewhat recent infiltrations at the major news papers.  They hacked the hell out of these news papers internal networks, then all at once were \"exposed\".  What do you think is more valuable to an attacker, access to news papers' internal networks, or an across the board media coverage of their hacks for the foreseeable future being broadcasted to the opposing forces population?  Cyber espionage is a bit more complex than the smash and grab hacks we see most of the time, so lets not treat it as simply.</p>"
		},
		"AI-API-Project-Idea" : {
			"title" : "AI API: Project Idea", 
			"description" : "A post about an idea to serve up an API abstracting the internals of various Artificial Intelligence algorithms",
			"keywords" : "API, AI, Artificial Intelligence",
			"date" : "03/01/2013", 
			"body" : "<p>I have always been interested in Artificial Intelligence, although it is often hard to find the right situation to apply it.  So the idea behind this project would be to create a REST API to various Artificial Intelligence engines I will be developing for different purposes.  This will allow for a large number of projects to see how effective my different AI engines are at solving their problems.</p><p>The classic example that I could use this for is IRC bots.  IRC is particularly good at filling up markov databases, and generally only has text being communicated.  So an IRC bot could send communications to the API and it could be added to the database.  Multiple bots on multiple servers and channels could relay information to the API, then also be able to generate the appropriate output.  Whether it be for analyzing how people type, or for attempting to make a bot talk somewhat intelligable.  Using multiple engines for input and output, I can determine which works better for each, and how best to tweak the engines to meet their needs.</p><center><img src=\"/static/images/gir.gif\" alt=\"Gir - What everyone wants in an AI\" /></center>"
		},
		"When-Are-Open-Source-Projects-Done": {
			"title" : "When are Open Source projects done?", 
			"description" : "A post attempting to answer the question of when open source projects are completed",
			"keywords" : "Open Source, RIT, Amazon, bwall",
			"date" : "02/28/2013", 
			"body" : "<p>For my senior project(capstone for Software Engineers at RIT), my team and I are modifying open source software to integrate with a cloud computing service.  I am being vague, because the actual project is irrelevant to this post.  We recently were asked a question that we have not been able to come up with a good answer for yet.  That question is, \"How do you know when you are done?\"  So far, all we can say to that is, \"Its open source.\"  Open source projects tend to not have an end.  Why would they have an end?  Not like funding will run out.  Most open source projects stop when the developers don't care about it anymore, whether it has become too messy to continue coding or no one is really using it.  The problem is that with this particular project, and with our time limit, we don't really have enough time to just burn out on the project, and we need a definitive way to say we are done.  The best chance we have is to time box our development, and just try to make sure that any more features we add are stable around when we decide to stop developing.  That leaves us very open to risk, especially with testing.  It is very hard to predict how long bug fixes will take when you haven't even developed the code that could possibly have bugs in it.</p>"
		},
		"About-OpenBwall": {
			"title" : "About OpenBwall", 
			"description" : "A brief description about what OpenBwall.com is.  This post also points out the distinction between OpenBwall.com and Openwall.",
			"keywords" : "OpenBwall, Brian Wallace, bwall, bwallHatesTwits",
			"date" : "02/28/2013", 
			"body" : "<p>OpenBwall, not to be confused with openwall, is meant to be a blog and brain dump for bwall aka Brian Wallace.  It will also be a place for me to host any projects that have nothing to do with anything I am affiliated with.  I often find myself yelling from the mountains as Ballast Security when not all of Ballast Security agrees with me.  Being able to post to something that is just mine, just me, will be good for Ballast Security and me.  Also, I have wanted to dig more into non-security projects such as Artificial Intelligence.</p><p>This blog, at times, might be about my personal life.  Sometimes, I want to vent about things, but have no proper location to actually vent about them.  In the past, I have found that venting to Artificial Intelligence tends to make it quite rude over time.  You haven't developed an angry AI until it calls you a cunt.</p>"
		}
	}
}
